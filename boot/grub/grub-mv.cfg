# use with: source "$prefix/grub-mv.cfg"
# then override function set_vars to your needs.
# Call set_vars (and graphmode if desired and supported).
# At the beginning of every submenu use set_vars
# (and menu_vars for menuentries allowing to change them);
# You can see an example in the menu_devices function.
# Then use $boot, $vga, $video in your kernel command line;
# use echo_boot or show_boot to inform the user before booting.
# menu_devices and menu_info are menues for chainloading or infos, respectively

if [ -s "$prefix/grubenv" ]; then
load_env
fi
set default='0'
if [ "$prev_saved_entry" ]; then
set saved_entry="$prev_saved_entry"
save_env saved_entry
set prev_saved_entry=
save_env prev_saved_entry
set boot_once=true
fi

function savedefault {
if [ -z "$boot_once" ]; then
saved_entry="$chosen"
save_env saved_entry
fi
}

set timeout=5

function graphmode {
insmod vga
insmod vbe
loadfont unicode
# insmod all_video
# insmod efi_gop
# insmod efi_uga
# insmod ieee1275_fb
# insmod video_bochs
# insmod video_cirrus
insmod gfxterm
terminal_output gfxterm
}

# Usage: root_ext device partnumber UUID
# Sets root and makes it active partition
function root_ext {
insmod ext2
set root="hd$1,msdos$2"
search --no-floppy --fs-uuid --set=root --hint-bios="$root" "$3"
}

# Usage: ext4linux root_device
# Sets variables $rootisx and $rootfs for passage on kernel command line
function ext4linux {
insmod gzio
set rootfs='rootfstype=ext4 rootflags=user_xattr,data=ordered,journal_checksum,barrier=1'
set rootisx="root=$1 $rootfs"
}

# Usage root_ext4linux device partnumber UUID root_device
# Combines root_ext, ext4linux, and echo_boot
function root_ext4linux {
	root_ext "$1" "$2" "$3"
	ext4linux "$4"
	echo_boot
}

function set_defaults {
set color_normal='light-green/black'
set color_highlight='yellow/brown'
set gfxmode='1024x768x32'
set zswap='zswap.enabled=1 zswap.compressor=lz4 zswap.max_pool_percent=25'
}

function set_systemd {
set init='/lib/systemd/systemd'
}

function set_openrc {
set init='/sbin/init'
}

function set_bash {
set init='/bin/bash'
}

function set_zsh {
set init='/bin/zsh'
}

function set_busybox {
set init='/bin/busybox'
}

functions set_800 {
set gfxpayload='800x600x32'
set vga='0x314'
set video='VGA:800x600@75'
}

function set_1024 {
set gfxpayload='1024x768x32'
set vga='0x317'
set video='VGA:1024x768@75'
}

function set_1152 {
set gfxpayload='1024x768x32'
set vga='0x317'
set video='VGA:1152x864@75'
}

function set_1280 {
set gfxpayload='1280x1024x32'
set vga='0x31A'
set video='VGA:1280x1024@75'
}

function set_1400 {
set gfxpayload='1280x1024x32'
set vga='0x31A'
set video='VGA:1400x1050@75'
}

function set_1600 {
set gfxpayload='1600x1200x16'
set vga='0x346'
set video='VGA:1600x1200@75'
}

function echo_resolution {
echo "gfxpayload: $gfxpayload"
echo "vga       : $vga"
echo "video     : $video"
}

function echo_current {
echo_init
echo_resolution
}

function echo_init {
echo "init      : $init"
}

function echo_boot {
echo_current
echo "root      : $root"
echo "$rootisx"
}

function pause {
echo -n 'Press Esc to return. '
sleep -i -v 60
}

function show_init {
echo_init
pause
}

function show_resolution {
echo_resolution
pause
}

function show_current {
echo_current
pause
}

function show_boot {
echo_boot
pause
}

function show_vbe {
set pagersave="$pager"
set pager=1
vbeinfo
pause
set pager="$pagersave"
}

function select_systemd {
echo 'selecting systemd:'
set_systemd
pause
}

function select_openrc {
echo 'selecting openrc:'
set_openrc
pause
}

function select_bash {
echo 'selecting bash:'
set_bash
pause
}

function select_zsh {
echo 'selecting zsh:'
set_zsh
pause
}

function select_busybox {
echo 'selecting busybox:'
set_busybox
pause
}

function enter_init {
echo 'Examples for init:'
echo
echo '/sbin/init'
echo '/lib/systemd/systemd'
echo '/bin/bash'
echo '/bin/zsh'
echo '/bin/busybox'
echo
echo -n "init (default init): "
read readvar
if [ -n "$readvar" ]; then
set init="$readvar"
fi
echo
echo
echo_init
pause
}

function select_800 {
set_800
show_resolution
}

function select_1024 {
set_1024
show_resolution
}

function select_1152 {
set_1152
show_resolution
}

function select_1280 {
set_1280
show_resolution
}

function select_1400 {
set_1400
show_resolution
}

function select_1600 {
set_1600
show_resolution
}

function enter_resolution {
echo 'Examples for gfxpayload:'
echo
echo '1280x1024x32'
echo '1024x768'
echo 'keep'
echo
echo 'Examples for vga (VESA modes):'
echo
echo '    | 640x480   800x600   1024x768  1280x1024  1600x1200'
echo '----+---------------------------------------------------'
echo '  8 |  0x301/769 0x303/771 0x305/773 0x307/775'
echo ' 16 |  0x310/784 0x313/787 0x316/790 0x319/793  0x346'
echo '*32*|  0x311/785 0x314/788 0x317/791 0x31A/794'
echo ' 64 |  0x312/786 0x315/789 0x318/792 0x31B/795'
echo
echo -n "gfxpayload (default $gfxpayload): "
read readvar
if [ -n "$readvar" ]; then
set gfxpayload="$readvar"
fi
echo
echo -n "vga (default $vga): "
read readvar
if [ -n "$readvar" ]; then
set vga="$readvar"
fi
echo
echo -n "video (default $video): "
read readvar
if [ -n "$readvar" ]; then
set video="$readvar"
fi
echo
echo
show_resolution
}

function set_vars {
set_defaults
set_systemd
set_1400
# The following restricts all except --unrestricted to require password above:
set superusers='root'
}

function menu_vars {
menuentry '0 - Resolution 1024 768' --hotkey 0 --unrestricted {
select_1024
}

menuentry '8 - Resolution 800 600' --hotkey 8 --unrestricted {
select_800
}

menuentry '2 - Resolution 1280 1024' --hotkey 2 --unrestricted {
select_1280
}

menuentry '1 - Resolution 1152 864' --hotkey 1 --unrestricted {
select_1152
}

menuentry '4 - Resolution 1400 1050' --hotkey 4 --unrestricted {
select_1400
}

menuentry '6 - Resolution 1600 1200' --hotkey 6 --unrestricted {
select_1600
}

menuentry 'S - Select systemd' --hotkey s --unrestricted {
select_systemd
}

menuentry 'O - Select openrc' --hotkey o --unrestricted {
select_openrc
}

menuentry 'B - Select bash' --hotkey b --users '' {
select_bash
}

menuentry 'Z - Select zsh' --hotkey z --users '' {
select_zsh
}

menuentry 'U - Select busysbox' --hotkey u --users '' {
select_busybox
}

menuentry 'R - Enter resolution' --hotkey r --unrestricted {
enter_resolution
}

menuentry 'I - Enter init' --hotkey i --users '' {
enter_init
}

menuentry 'P - Print current settings' --hotkey p --unrestricted --class gentoo --class gnu-linux --class gnu --class os {
show_current
}
# End menu_vars
}

function menu_devices {
submenu 'D - >Chainload Devices<' --hotkey d --users '' --class os {
set_vars

menuentry '0 - Harddisk 0' --hotkey 0 --unrestricted --class os {
echo 'Harddisk 0'
set root='hd0'
chainloader +1
}

menuentry '1 - Harddisk 1' --hotkey 1 --unrestricted --class os {
echo 'Harddisk 1'
set root='hd1'
chainloader +1
}

menuentry 'F - Floppy' --hotkey f --unrestricted --class os {
echo 'Floppy'
set root='fd0'
chainloader +1
}

menuentry 'D - CD/DVD 0' --hotkey d --unrestricted --class os {
echo 'CD/DVD 0'
set root='cd0'
chainloader +1
}

menuentry 'W - CD/DVD 1' --hotkey w --unrestricted --class os {
echo 'CD/DVD 1'
set root='cd1'
chainloader +1
}
# End submenu 'Chainload Devices'
}
# End menu_devices
}

function menu_info {
menuentry 'I - VBE info' --hotkey i --unrestricted {
show_vbe
}

menuentry 'G - Install grub info' --hotkey g --unrestricted {
echo 'grub-install [--target=i386-pc or --target=x86_64-efi] /dev/sda'
pause
}
# End menu_info
}
